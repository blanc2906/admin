generator client {
  provider = "prisma-client-js"
  
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
 
}

enum EstateType {
  DEFAULT
  APARTMENT
  HOUSE
  COMMERCIAL
  SCHOOL
}

model Configuration{
    id Int @id @default(autoincrement())
    key String @unique
    value String
    description String?
}
model AdminAccount {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  roles     Role[]    @relation("AdminAccountRoles")
  estate    Estate[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  active    Boolean   @default(true)
  deletedAt DateTime?
  @@index([email])
  @@index([active])
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  permissions Permission[]  @relation("RolePermissions")
  accounts    AdminAccount[] @relation("AdminAccountRoles")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Permission {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  roles     Role[]    @relation("RolePermissions")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// for features module
model Feature {
  id         Int           @id @default(autoincrement())
  name        String       @unique
  table       String       @unique 
  version     Int           @default(1)        
  meta        Json
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  @@index([table, version])
}

model Estate {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255) 
  description      String?
  address          String?
  imageFileUrls    String[]          @default([])
  imageFileIds     String[]          @default([])
  type             EstateType
  members          User[]            @relation("EstateMembers")
  areas            EstateArea[]
  devices          Device[]      
  createdBy        AdminAccount?        @relation(fields: [createdById], references: [id])    
  createdById      Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  @@index([type])
  @@index([createdById])
}

model EstateArea {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String?
  imageFileUrls String[]    @default([])
  imageFileIds  String[]    @default([])
  estateId      Int
  estate        Estate      @relation(fields: [estateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  devices       Device[]    @relation("AreaDevices")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  @@index([estateId])
}

model Device {
  id Int @id @default(autoincrement()) 
  name String @db.VarChar(255)
  description String?
  imageFileUrls String[] @default([])
  imageFileIds String[] @default([])
  estateId Int
  estate Estate @relation(fields: [estateId], references: [id])
  area EstateArea[] @relation("AreaDevices")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  email String @unique
  password String
  estates Estate[] @relation("EstateMembers")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}
